
PasswordControlledSecurityLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080012c  0080012c  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffb  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072f  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000450  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afd  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000035e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdCommand>:

int counter = 0;  		 //Used to see how many characters are printed

//****************************************************************
void lcdCommand (unsigned char cmd) {
	LCD_DPRT = cmd;				//send cmd to data port
  a6:	85 b9       	out	0x05, r24	; 5
	LCD_CPRT &= ~(1<<LCD_RS);   //RS = 0 for command
  a8:	40 98       	cbi	0x08, 0	; 8
	LCD_CPRT &= ~(1<<LCD_RW);   //RW = 0 for write
  aa:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN);    //EN = 1 for H-to-L pulse
  ac:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcdCommand+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcdCommand+0x10>
	_delay_us(1);					//wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN);   //EN = 0 for H-to_L pulse
  b6:	42 98       	cbi	0x08, 2	; 8
  b8:	87 ec       	ldi	r24, 0xC7	; 199
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdCommand+0x16>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdCommand+0x1c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <lcd_init>:
	_delay_us(100);				//wait to make enable wide
	counter ++;
}

void lcd_init() {
	LCD_DDDR = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
	LCD_CDDR = 0xFF;
  ca:	87 b9       	out	0x07, r24	; 7
	LCD_CPRT &=~(1<<LCD_EN);   //LCD_EN = 0
  cc:	42 98       	cbi	0x08, 2	; 8
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_init+0xc>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_init+0x12>
  d8:	00 00       	nop
	_delay_us(2000);
	//wait for init
	lcdCommand(0x38);   //initialize LCD 2 line, 5x7
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x0E);   //display on, cursor on
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x01);   //clear LCD
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_init+0x2a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_init+0x30>
  f6:	00 00       	nop
	_delay_us(2000);		 //wait
	lcdCommand(0x06);   //shift cursor right
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
  fe:	08 95       	ret

00000100 <lcd_gotoxy>:
		lcdData(str[i]); i++;
	}
}

// go to specific LCD locations
void lcd_gotoxy(unsigned char x, unsigned char y) {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	00 d0       	rcall	.+0      	; 0x106 <lcd_gotoxy+0x6>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0};   // locations of the first character of each line
 10a:	90 e8       	ldi	r25, 0x80	; 128
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	90 ec       	ldi	r25, 0xC0	; 192
 110:	9a 83       	std	Y+2, r25	; 0x02
	if (x == 1, y == 1)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	29 f4       	brne	.+10     	; 0x120 <lcd_gotoxy+0x20>
	{
		counter = 0;			// just to make sure when counter is called at this location it goes to 0
 116:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 11a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
 11e:	08 c0       	rjmp	.+16     	; 0x130 <lcd_gotoxy+0x30>
	}
	if (x == 1, y == 2)
 120:	62 30       	cpi	r22, 0x02	; 2
 122:	31 f4       	brne	.+12     	; 0x130 <lcd_gotoxy+0x30>
	{
		counter = 8;	// just to make sure when counter is called at this location it goes to 8
 124:	28 e0       	ldi	r18, 0x08	; 8
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__data_end+0x1>
 12c:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__data_end>
	}
	lcdCommand(firstCharAdr[y-1] + x-1);
 130:	fe 01       	movw	r30, r28
 132:	e6 0f       	add	r30, r22
 134:	f1 1d       	adc	r31, r1
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 81       	ld	r25, Z
 13a:	89 0f       	add	r24, r25
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 140:	87 ec       	ldi	r24, 0xC7	; 199
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_gotoxy+0x44>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_gotoxy+0x4a>
 14a:	00 00       	nop
	_delay_us(100);
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcdData>:
	_delay_us(1);					//wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN);   //EN = 0 for H-to_L pulse
	_delay_us(100);				//wait to make enable wide
}

void lcdData(unsigned char data) {
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	if (counter == 8)		// if its at 8 go to (1,2) (this is here because its an 8x2 LED)
 15a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 15e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 162:	08 97       	sbiw	r24, 0x08	; 8
 164:	31 f4       	brne	.+12     	; 0x172 <lcdData+0x1c>
	{
		lcd_gotoxy(1,2);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
	}
	if (counter == 16)
 172:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 176:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 17a:	40 97       	sbiw	r24, 0x10	; 16
 17c:	69 f4       	brne	.+26     	; 0x198 <lcdData+0x42>
	{
		lcdCommand(0x01);	 // if it gets to 16 reset it to the beginning
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
		lcd_gotoxy(1,1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
		counter = 0;
 190:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 194:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
	}
	LCD_DPRT = data;				//send data to data port
 198:	c5 b9       	out	0x05, r28	; 5
	LCD_CPRT |= (1<<LCD_RS);		//RS = 1 for data
 19a:	40 9a       	sbi	0x08, 0	; 8
	LCD_CPRT &= ~(1<<LCD_RW);   //RW = 0 for write
 19c:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN);		//EN = 1 for H-to-L pulse
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcdData+0x4c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcdData+0x52>
	_delay_us(1);					//wait to make enable wide
	LCD_CPRT &= ~(1<<LCD_EN);   //EN = 0 for H-to_L pulse
 1a8:	42 98       	cbi	0x08, 2	; 8
 1aa:	87 ec       	ldi	r24, 0xC7	; 199
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcdData+0x58>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcdData+0x5e>
 1b4:	00 00       	nop
	_delay_us(100);				//wait to make enable wide
	counter ++;
 1b6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 1ba:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 1c4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_print>:
	lcdCommand(0x01);   //clear LCD
	_delay_us(2000);		 //wait
	lcdCommand(0x06);   //shift cursor right
}

void lcd_print(char * str) {
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	fc 01       	movw	r30, r24
	unsigned char i = 0;

	while (str[i]!=0)  {
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <lcd_print+0x24>
 1da:	8f 01       	movw	r16, r30
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
		lcdData(str[i]); i++;
 1de:	0e 94 ab 00 	call	0x156	; 0x156 <lcdData>
 1e2:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char * str) {
	unsigned char i = 0;

	while (str[i]!=0)  {
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 81       	ld	r24, Z
 1ec:	81 11       	cpse	r24, r1
 1ee:	f7 cf       	rjmp	.-18     	; 0x1de <lcd_print+0x12>
		lcdData(str[i]); i++;
	}
}
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <main>:
	lcdCommand(firstCharAdr[y-1] + x-1);
	_delay_us(100);
}


int main(void) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	2f 97       	sbiw	r28, 0x0f	; 15
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	// initialize LCD
	char colloc, rowloc, printCharacter, password, count; // password and count are used to know when someone enters the password
	char initialcount = 0;
	char userPassword[3] ={'\0','\0','\0'};		 // initially all nulls 
 20c:	19 82       	std	Y+1, r1	; 0x01
 20e:	1a 82       	std	Y+2, r1	; 0x02
 210:	1b 82       	std	Y+3, r1	; 0x03
	char keypad[4][3] = {'1','2','3',    // my keypad inputs mapped here
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	e0 e0       	ldi	r30, 0x00	; 0
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	14 96       	adiw	r26, 0x04	; 4
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x24>
						 '4','5','6',
						 '7','8','9',
						 '*','0','#'};
	lcd_init();		//initialization
 224:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_init>
	KEY_DDR = 0x0F;
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	8a b9       	out	0x0a, r24	; 10
	KEY_PRT = 0x7F;
 22c:	8f e7       	ldi	r24, 0x7F	; 127
 22e:	8b b9       	out	0x0b, r24	; 11
 230:	de 01       	movw	r26, r28
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	23 e0       	ldi	r18, 0x03	; 3
			_delay_ms(20);
			colloc = (KEY_PIN & 0x70);
		} while (colloc == 0x70); // this is here to be certain someone pushed a button

		while(1){
			KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
 236:	0f 2e       	mov	r0, r31
 238:	fe e7       	ldi	r31, 0x7E	; 126
 23a:	ef 2e       	mov	r14, r31
 23c:	f0 2d       	mov	r31, r0
			_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 0;  // save row location
 23e:	f1 2c       	mov	r15, r1
				break;
			}
			KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
 240:	1d e7       	ldi	r17, 0x7D	; 125
			_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 1;				// save row location
 242:	71 e0       	ldi	r23, 0x01	; 1
				break;
			}
			KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
 244:	6b e7       	ldi	r22, 0x7B	; 123
			_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 2; 			// save row location
 246:	52 e0       	ldi	r21, 0x02	; 2
				break;
			}
			KEY_PRT = 0x77;
 248:	47 e7       	ldi	r20, 0x77	; 119
			_delay_ms(10);
			colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
			rowloc = 3;
 24a:	33 e0       	ldi	r19, 0x03	; 3
	KEY_PRT = 0x7F;
	
	while (initialcount < 3){
		do
		{
			KEY_PRT &= 0x70;			// make sure no buttons are being pressed yet
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	80 77       	andi	r24, 0x70	; 112
 250:	8b b9       	out	0x0b, r24	; 11
			colloc = (KEY_PIN & 0x70);
 252:	89 b1       	in	r24, 0x09	; 9
		}while (colloc != 0x70);  // repeat until someone stops pushing the button
 254:	80 77       	andi	r24, 0x70	; 112
 256:	80 37       	cpi	r24, 0x70	; 112
 258:	c9 f7       	brne	.-14     	; 0x24c <main+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9c e9       	ldi	r25, 0x9C	; 156
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x66>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x6c>
 264:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);
				colloc = (KEY_PIN & 0x70);
 266:	89 b1       	in	r24, 0x09	; 9
			} while (colloc == 0x70);  // see if someone pushed a button
 268:	80 77       	andi	r24, 0x70	; 112
 26a:	80 37       	cpi	r24, 0x70	; 112
 26c:	b1 f3       	breq	.-20     	; 0x25a <main+0x62>
 26e:	8f e3       	ldi	r24, 0x3F	; 63
 270:	9c e9       	ldi	r25, 0x9C	; 156
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x7a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x80>
 278:	00 00       	nop
			_delay_ms(20);
			colloc = (KEY_PIN & 0x70);
 27a:	89 b1       	in	r24, 0x09	; 9
		} while (colloc == 0x70); // this is here to be certain someone pushed a button
 27c:	80 77       	andi	r24, 0x70	; 112
 27e:	80 37       	cpi	r24, 0x70	; 112
 280:	61 f3       	breq	.-40     	; 0x25a <main+0x62>

		while(1){
			KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
 282:	eb b8       	out	0x0b, r14	; 11
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x90>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x96>
 28e:	00 00       	nop
			_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
 290:	99 b1       	in	r25, 0x09	; 9
 292:	90 77       	andi	r25, 0x70	; 112
			if (colloc != 0x70){
 294:	90 37       	cpi	r25, 0x70	; 112
 296:	09 f5       	brne	.+66     	; 0x2da <main+0xe2>
				rowloc = 0;  // save row location
				break;
			}
			KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
 298:	1b b9       	out	0x0b, r17	; 11
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0xa6>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0xac>
 2a4:	00 00       	nop
			_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
 2a6:	99 b1       	in	r25, 0x09	; 9
 2a8:	90 77       	andi	r25, 0x70	; 112
			if (colloc != 0x70){
 2aa:	90 37       	cpi	r25, 0x70	; 112
 2ac:	c1 f4       	brne	.+48     	; 0x2de <main+0xe6>
				rowloc = 1;				// save row location
				break;
			}
			KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
 2ae:	6b b9       	out	0x0b, r22	; 11
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0xbc>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0xc2>
 2ba:	00 00       	nop
			_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
 2bc:	99 b1       	in	r25, 0x09	; 9
 2be:	90 77       	andi	r25, 0x70	; 112
			if (colloc != 0x70){
 2c0:	90 37       	cpi	r25, 0x70	; 112
 2c2:	79 f4       	brne	.+30     	; 0x2e2 <main+0xea>
				rowloc = 2; 			// save row location
				break;
			}
			KEY_PRT = 0x77;
 2c4:	4b b9       	out	0x0b, r20	; 11
 2c6:	8f e1       	ldi	r24, 0x1F	; 31
 2c8:	9e e4       	ldi	r25, 0x4E	; 78
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0xd2>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0xd8>
 2d0:	00 00       	nop
			_delay_ms(10);
			colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
 2d2:	99 b1       	in	r25, 0x09	; 9
 2d4:	90 77       	andi	r25, 0x70	; 112
			rowloc = 3;
 2d6:	83 2f       	mov	r24, r19
			break;
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <main+0xec>
		while(1){
			KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
			_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 0;  // save row location
 2da:	8f 2d       	mov	r24, r15
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <main+0xec>
			}
			KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
			_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 1;				// save row location
 2de:	87 2f       	mov	r24, r23
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <main+0xec>
			}
			KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
			_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
			colloc = (KEY_PIN & 0x70);
			if (colloc != 0x70){
				rowloc = 2; 			// save row location
 2e2:	85 2f       	mov	r24, r21
			_delay_ms(10);
			colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
			rowloc = 3;
			break;
		}
		if (colloc == 0x60)
 2e4:	90 36       	cpi	r25, 0x60	; 96
 2e6:	79 f4       	brne	.+30     	; 0x306 <main+0x10e>
		{
			userPassword[initialcount] = keypad[rowloc][0];
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	8e 0f       	add	r24, r30
 2f2:	9f 1f       	adc	r25, r31
 2f4:	e1 e0       	ldi	r30, 0x01	; 1
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 0f       	add	r30, r28
 2fa:	fd 1f       	adc	r31, r29
 2fc:	e8 0f       	add	r30, r24
 2fe:	f9 1f       	adc	r31, r25
 300:	83 81       	ldd	r24, Z+3	; 0x03
 302:	8c 93       	st	X, r24
 304:	21 c0       	rjmp	.+66     	; 0x348 <main+0x150>
		}
		else if (colloc == 0x50)
 306:	90 35       	cpi	r25, 0x50	; 80
 308:	79 f4       	brne	.+30     	; 0x328 <main+0x130>
		{
			userPassword[initialcount] = keypad[rowloc][1];
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	8e 0f       	add	r24, r30
 314:	9f 1f       	adc	r25, r31
 316:	e1 e0       	ldi	r30, 0x01	; 1
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ec 0f       	add	r30, r28
 31c:	fd 1f       	adc	r31, r29
 31e:	e8 0f       	add	r30, r24
 320:	f9 1f       	adc	r31, r25
 322:	84 81       	ldd	r24, Z+4	; 0x04
 324:	8c 93       	st	X, r24
 326:	10 c0       	rjmp	.+32     	; 0x348 <main+0x150>
		}
		else if (colloc == 0x30)
 328:	90 33       	cpi	r25, 0x30	; 48
 32a:	71 f4       	brne	.+28     	; 0x348 <main+0x150>
		{
			userPassword[initialcount] = keypad[rowloc][2];
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	8e 0f       	add	r24, r30
 336:	9f 1f       	adc	r25, r31
 338:	e1 e0       	ldi	r30, 0x01	; 1
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ec 0f       	add	r30, r28
 33e:	fd 1f       	adc	r31, r29
 340:	e8 0f       	add	r30, r24
 342:	f9 1f       	adc	r31, r25
 344:	85 81       	ldd	r24, Z+5	; 0x05
 346:	8c 93       	st	X, r24
		}
		
		initialcount++;
		if (initialcount == 3)
 348:	21 30       	cpi	r18, 0x01	; 1
 34a:	11 f5       	brne	.+68     	; 0x390 <main+0x198>
 34c:	9f ef       	ldi	r25, 0xFF	; 255
 34e:	20 e7       	ldi	r18, 0x70	; 112
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	91 50       	subi	r25, 0x01	; 1
 354:	20 40       	sbci	r18, 0x00	; 0
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x15a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x164>
 35c:	00 00       	nop
		{
			_delay_ms(100);
			count = 0;
			lcd_gotoxy(1,1);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
			lcd_print("Pass Entered"); 
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	22 e5       	ldi	r18, 0x52	; 82
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	91 50       	subi	r25, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x17c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x186>
 37e:	00 00       	nop
			
			_delay_ms(300);
			lcdCommand(0x01);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
			lcd_gotoxy(1,1);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
 38e:	04 c0       	rjmp	.+8      	; 0x398 <main+0x1a0>
 390:	21 50       	subi	r18, 0x01	; 1
 392:	11 96       	adiw	r26, 0x01	; 1
						 '*','0','#'};
	lcd_init();		//initialization
	KEY_DDR = 0x0F;
	KEY_PRT = 0x7F;
	
	while (initialcount < 3){
 394:	21 11       	cpse	r18, r1
 396:	5a cf       	rjmp	.-332    	; 0x24c <main+0x54>
		if (printCharacter == userPassword[count]){
			password ++;
		}
		else
		{
			password = 0;
 398:	10 e0       	ldi	r17, 0x00	; 0
 39a:	f1 2c       	mov	r15, r1
		_delay_ms(20);
		colloc = (KEY_PIN & 0x70);
	} while (colloc == 0x70); // this is here to be certain someone pushed a button

	while(1){
		KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
 39c:	0f 2e       	mov	r0, r31
 39e:	fe e7       	ldi	r31, 0x7E	; 126
 3a0:	df 2e       	mov	r13, r31
 3a2:	f0 2d       	mov	r31, r0
		_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 0;  // save row location
 3a4:	c1 2c       	mov	r12, r1
			break;
		}
		KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
 3a6:	0f 2e       	mov	r0, r31
 3a8:	fd e7       	ldi	r31, 0x7D	; 125
 3aa:	7f 2e       	mov	r7, r31
 3ac:	f0 2d       	mov	r31, r0
		_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 1;				// save row location
 3ae:	ee 24       	eor	r14, r14
 3b0:	e3 94       	inc	r14
			break;
		}
		KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
 3b2:	0f 2e       	mov	r0, r31
 3b4:	fb e7       	ldi	r31, 0x7B	; 123
 3b6:	8f 2e       	mov	r8, r31
 3b8:	f0 2d       	mov	r31, r0
		_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 2; 			// save row location
 3ba:	68 94       	set
 3bc:	99 24       	eor	r9, r9
 3be:	91 f8       	bld	r9, 1
			break;
		}
		KEY_PRT = 0x77;
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f7 e7       	ldi	r31, 0x77	; 119
 3c4:	af 2e       	mov	r10, r31
 3c6:	f0 2d       	mov	r31, r0
		_delay_ms(10);
		colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
		rowloc = 3;
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f3 e0       	ldi	r31, 0x03	; 3
 3cc:	bf 2e       	mov	r11, r31
 3ce:	f0 2d       	mov	r31, r0
	
	
	while (1){
	 do
	{
		KEY_PRT &= 0x70;			// make sure no buttons are being pressed yet
 3d0:	8b b1       	in	r24, 0x0b	; 11
 3d2:	80 77       	andi	r24, 0x70	; 112
 3d4:	8b b9       	out	0x0b, r24	; 11
		colloc = (KEY_PIN & 0x70);
 3d6:	89 b1       	in	r24, 0x09	; 9
	}while (colloc != 0x70);  // repeat until someone stops pushing the button
 3d8:	80 77       	andi	r24, 0x70	; 112
 3da:	80 37       	cpi	r24, 0x70	; 112
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <main+0x1d8>
 3de:	8f e3       	ldi	r24, 0x3F	; 63
 3e0:	9c e9       	ldi	r25, 0x9C	; 156
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x1ea>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x1f0>
 3e8:	00 00       	nop
	do
	{
		do
		{
			_delay_ms(20);
			colloc = (KEY_PIN & 0x70);
 3ea:	89 b1       	in	r24, 0x09	; 9
		} while (colloc == 0x70);  // see if someone pushed a button
 3ec:	80 77       	andi	r24, 0x70	; 112
 3ee:	80 37       	cpi	r24, 0x70	; 112
 3f0:	b1 f3       	breq	.-20     	; 0x3de <main+0x1e6>
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	9c e9       	ldi	r25, 0x9C	; 156
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0x1fe>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x204>
 3fc:	00 00       	nop
		_delay_ms(20);
		colloc = (KEY_PIN & 0x70);
 3fe:	89 b1       	in	r24, 0x09	; 9
	} while (colloc == 0x70); // this is here to be certain someone pushed a button
 400:	80 77       	andi	r24, 0x70	; 112
 402:	80 37       	cpi	r24, 0x70	; 112
 404:	61 f3       	breq	.-40     	; 0x3de <main+0x1e6>

	while(1){
		KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
 406:	db b8       	out	0x0b, r13	; 11
 408:	8f ec       	ldi	r24, 0xCF	; 207
 40a:	97 e0       	ldi	r25, 0x07	; 7
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
		_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
 414:	89 b1       	in	r24, 0x09	; 9
 416:	80 77       	andi	r24, 0x70	; 112
		if (colloc != 0x70){
 418:	80 37       	cpi	r24, 0x70	; 112
 41a:	09 f5       	brne	.+66     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			rowloc = 0;  // save row location
			break;
		}
		KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
 41c:	7b b8       	out	0x0b, r7	; 11
 41e:	8f e1       	ldi	r24, 0x1F	; 31
 420:	9e e4       	ldi	r25, 0x4E	; 78
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
		_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
 42a:	89 b1       	in	r24, 0x09	; 9
 42c:	80 77       	andi	r24, 0x70	; 112
		if (colloc != 0x70){
 42e:	80 37       	cpi	r24, 0x70	; 112
 430:	c1 f4       	brne	.+48     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			rowloc = 1;				// save row location
			break;
		}
		KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
 432:	8b b8       	out	0x0b, r8	; 11
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	9e e4       	ldi	r25, 0x4E	; 78
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
		_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
 440:	89 b1       	in	r24, 0x09	; 9
 442:	80 77       	andi	r24, 0x70	; 112
		if (colloc != 0x70){
 444:	80 37       	cpi	r24, 0x70	; 112
 446:	79 f4       	brne	.+30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			rowloc = 2; 			// save row location
			break;
		}
		KEY_PRT = 0x77;
 448:	ab b8       	out	0x0b, r10	; 11
 44a:	8f e1       	ldi	r24, 0x1F	; 31
 44c:	9e e4       	ldi	r25, 0x4E	; 78
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
		_delay_ms(10);
		colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
 456:	89 b1       	in	r24, 0x09	; 9
 458:	80 77       	andi	r24, 0x70	; 112
		rowloc = 3;
 45a:	9b 2d       	mov	r25, r11
		break;
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	while(1){
		KEY_PRT = 0x7E;    // we ground the first row to see if the thing being pressed is there
		_delay_ms(1);			 // the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 0;  // save row location
 45e:	9c 2d       	mov	r25, r12
 460:	03 c0       	rjmp	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		}
		KEY_PRT = 0x7D; 		// we ground the second row to see if the thing being pressed is there
		_delay_ms(10); 			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 1;				// save row location
 462:	9e 2d       	mov	r25, r14
 464:	01 c0       	rjmp	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		}
		KEY_PRT = 0x7B;			// we ground the third row to see if the thing being pressed is there
		_delay_ms(10);			// the delay is here because otherwise the hardware needed time to ground it
		colloc = (KEY_PIN & 0x70);
		if (colloc != 0x70){
			rowloc = 2; 			// save row location
 466:	99 2d       	mov	r25, r9
		_delay_ms(10);
		colloc = (KEY_PIN & 0x70);  // If its not any of the past rows we know its the third one
		rowloc = 3;
		break;
		}
		if (colloc == 0x60)
 468:	80 36       	cpi	r24, 0x60	; 96
 46a:	91 f4       	brne	.+36     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		{
			printCharacter = keypad[rowloc][0];
 46c:	89 2f       	mov	r24, r25
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	8e 0f       	add	r24, r30
 478:	9f 1f       	adc	r25, r31
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ec 0f       	add	r30, r28
 480:	fd 1f       	adc	r31, r29
 482:	e8 0f       	add	r30, r24
 484:	f9 1f       	adc	r31, r25
 486:	03 81       	ldd	r16, Z+3	; 0x03
			lcdData(printCharacter);
 488:	80 2f       	mov	r24, r16
 48a:	0e 94 ab 00 	call	0x156	; 0x156 <lcdData>
 48e:	27 c0       	rjmp	.+78     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		}
		else if (colloc == 0x50)
 490:	80 35       	cpi	r24, 0x50	; 80
 492:	91 f4       	brne	.+36     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		{
			printCharacter = keypad[rowloc][1];
 494:	89 2f       	mov	r24, r25
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fc 01       	movw	r30, r24
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	8e 0f       	add	r24, r30
 4a0:	9f 1f       	adc	r25, r31
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ec 0f       	add	r30, r28
 4a8:	fd 1f       	adc	r31, r29
 4aa:	e8 0f       	add	r30, r24
 4ac:	f9 1f       	adc	r31, r25
 4ae:	04 81       	ldd	r16, Z+4	; 0x04
			lcdData(printCharacter);
 4b0:	80 2f       	mov	r24, r16
 4b2:	0e 94 ab 00 	call	0x156	; 0x156 <lcdData>
 4b6:	13 c0       	rjmp	.+38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		}
		else if (colloc == 0x30)
 4b8:	80 33       	cpi	r24, 0x30	; 48
 4ba:	89 f4       	brne	.+34     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		{
			printCharacter = keypad[rowloc][2];
 4bc:	89 2f       	mov	r24, r25
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	8e 0f       	add	r24, r30
 4c8:	9f 1f       	adc	r25, r31
 4ca:	e1 e0       	ldi	r30, 0x01	; 1
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	e8 0f       	add	r30, r24
 4d4:	f9 1f       	adc	r31, r25
 4d6:	05 81       	ldd	r16, Z+5	; 0x05
			lcdData(printCharacter);
 4d8:	80 2f       	mov	r24, r16
 4da:	0e 94 ab 00 	call	0x156	; 0x156 <lcdData>
		else if ((printCharacter == userPassword[2]) && (password == 2))
		{
			password ++;
		}*/
		
		if (printCharacter == userPassword[count]){
 4de:	e1 e0       	ldi	r30, 0x01	; 1
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ec 0f       	add	r30, r28
 4e4:	fd 1f       	adc	r31, r29
 4e6:	e1 0f       	add	r30, r17
 4e8:	f1 1d       	adc	r31, r1
 4ea:	80 81       	ld	r24, Z
 4ec:	08 13       	cpse	r16, r24
 4ee:	3f c0       	rjmp	.+126    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
			password ++;
 4f0:	f3 94       	inc	r15
		}
		else
		{
			password = 0;
		}
		count++;
 4f2:	1f 5f       	subi	r17, 0xFF	; 255
		if (count == 3)
 4f4:	13 30       	cpi	r17, 0x03	; 3
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	6b cf       	rjmp	.-298    	; 0x3d0 <main+0x1d8>
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	20 e7       	ldi	r18, 0x70	; 112
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	91 50       	subi	r25, 0x01	; 1
 502:	20 40       	sbci	r18, 0x00	; 0
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
		{
			_delay_ms(100);
			count = 0;
			if (password == 3)
 50c:	93 e0       	ldi	r25, 0x03	; 3
 50e:	f9 12       	cpse	r15, r25
 510:	09 c0       	rjmp	.+18     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			{
				lcd_gotoxy(1,1);
 512:	6e 2d       	mov	r22, r14
 514:	8e 2d       	mov	r24, r14
 516:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
				lcd_print("Correct");  // password was entered correctly SUCCESS
 51a:	89 e1       	ldi	r24, 0x19	; 25
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
 522:	08 c0       	rjmp	.+16     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
			}
			else
			{
				lcd_gotoxy(1,1);
 524:	6e 2d       	mov	r22, r14
 526:	8e 2d       	mov	r24, r14
 528:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
				lcd_print("Incorrect"); // password was entered correctly SAD!
 52c:	81 e2       	ldi	r24, 0x21	; 33
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
 534:	2f ef       	ldi	r18, 0xFF	; 255
 536:	82 e5       	ldi	r24, 0x52	; 82
 538:	97 e0       	ldi	r25, 0x07	; 7
 53a:	21 50       	subi	r18, 0x01	; 1
 53c:	80 40       	sbci	r24, 0x00	; 0
 53e:	90 40       	sbci	r25, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 542:	00 c0       	rjmp	.+0      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 544:	00 00       	nop
			}
			_delay_ms(300);
			lcdCommand(0x01);
 546:	8e 2d       	mov	r24, r14
 548:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
			lcd_gotoxy(1,1);
 54c:	6e 2d       	mov	r22, r14
 54e:	8e 2d       	mov	r24, r14
 550:	0e 94 80 00 	call	0x100	; 0x100 <lcd_gotoxy>
		}
		count++;
		if (count == 3)
		{
			_delay_ms(100);
			count = 0;
 554:	10 e0       	ldi	r17, 0x00	; 0
				lcd_print("Incorrect"); // password was entered correctly SAD!
			}
			_delay_ms(300);
			lcdCommand(0x01);
			lcd_gotoxy(1,1);
			password = 0;    // reset everything
 556:	f1 2c       	mov	r15, r1
 558:	3b cf       	rjmp	.-394    	; 0x3d0 <main+0x1d8>
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	80 e7       	ldi	r24, 0x70	; 112
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	21 50       	subi	r18, 0x01	; 1
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 56a:	00 00       	nop
 56c:	db cf       	rjmp	.-74     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		}
		else
		{
			password = 0;
		}
		count++;
 56e:	1f 5f       	subi	r17, 0xFF	; 255
		if (count == 3)
 570:	13 30       	cpi	r17, 0x03	; 3
 572:	99 f3       	breq	.-26     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		if (printCharacter == userPassword[count]){
			password ++;
		}
		else
		{
			password = 0;
 574:	f1 2c       	mov	r15, r1
 576:	2c cf       	rjmp	.-424    	; 0x3d0 <main+0x1d8>

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
